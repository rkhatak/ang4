export { KBPagesRendererDirective, KBPage } from "./render.component";
import { EventEmitter, ElementRef, QueryList } from '@angular/core';
import { KBPagesRendererDirective } from "./render.component";
import { KBNavButtonComponent } from './navbutton.component';
import { PageSliderControlAPI } from "../types";
import { SlideAnimation } from "../functionality/animation";
export declare class KBPageSliderComponent implements PageSliderControlAPI {
    private element;
    private innerContainer;
    private touchEventHandler;
    private sideClickHandler;
    private arrowKeysHandler;
    constructor(element: ElementRef);
    page: number;
    pageChange: EventEmitter<number>;
    pageSizeChange: EventEmitter<[number, number]>;
    readonly pageCount: number;
    pageCountChange: EventEmitter<number>;
    showIndicator: boolean;
    overlayIndicator: boolean;
    dotColor: string;
    locked: boolean;
    transitionDuration: number;
    enableOverscroll: boolean;
    enableSideClicks: boolean;
    enableArrowKeys: boolean;
    scrollStateChange: EventEmitter<boolean>;
    private _pageOffset;
    protected pageOffset: number;
    private readonly pxOffset;
    buttons: QueryList<KBNavButtonComponent>;
    readonly buttonTop: string;
    readonly pageWidth: any;
    readonly pageHeight: number;
    readonly containerWidth: string;
    readonly containerHeight: string;
    private readonly dotBottom;
    renderer: KBPagesRendererDirective;
    ngOnInit(): void;
    protected Resize(): void;
    private blockInteraction;
    ScrollTo(x: number): void;
    AnimateToNextPage(momentum?: number): SlideAnimation | null;
    AnimateToPreviousPage(momentum?: number): SlideAnimation | null;
    AnimateToX(x: number, momentum: number): SlideAnimation | null;
    StartScroll(): void;
    EndScroll(): void;
    protected ClampX(x: number): number;
    protected OverscrollRamp(input: number): number;
}
